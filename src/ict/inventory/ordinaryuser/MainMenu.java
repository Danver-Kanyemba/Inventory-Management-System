package ict.inventory.ordinaryuser;


import ict.inventory.admin.AddProductFrm;
import ict.inventory.admin.ModifyUsersFrm;
import ict.inventory.admin.updateProductFrm;
import ict.inventory.connectionpackage.ConnectToDB;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Danver
 */
public class MainMenu extends javax.swing.JFrame {
     String username, roleForUser, serial_no, selectedCategoryId, 
             searchingTxt, employeeSearch, currentSelectedProductSerial;
      int shortcutIdForQuery = 0;
      String querySelectedEmployeeStatement = "";  
       public String idForUser;
    /**
     * Creates new form MainMenu
     * @param idForUser
     * @param username
     * @param roleForUser
     */
    public MainMenu(String idForUser,String username,String roleForUser ) throws ClassNotFoundException, SQLException {
        initComponents();        
        this.idForUser = idForUser;
        this.username = username;
        this.roleForUser = roleForUser;
        System.out.println(idForUser);
    if(roleForUser.equals("Admin")){
        adminRoleBtn.setEnabled(true);
        superAdminBtn.setEnabled(false); 
        superAdminBtn.setVisible(false);

        System.out.println("This is the main form for admin");
        System.out.println(roleForUser);
        show_departments();
        show_location();
        show_category(); 
        // categoryUpdateCombo

    }   
    else if(roleForUser.equals("Super Admin")){
        adminRoleBtn.setEnabled(true);
        superAdminBtn.setEnabled(true);       

        System.out.println("This is the main form for Super Admin");
        System.out.println(roleForUser);
        show_departments();
        show_location();
        show_category();
        show_campus();
    }     
    else{
            adminRoleBtn.setEnabled(false);   
            superAdminBtn.setEnabled(false);           
            adminRoleBtn.setVisible(false);
            superAdminBtn.setVisible(false);
            System.out.println(roleForUser);
            System.out.println("This is the main form for ordinary");
       }
       show_stock();
       show_employees();

       show_employeesAndProducts();
       usernameLbl.setText(username);
    }

    public MainMenu() {
    }

    public void StartMain(String passedLbl){
        infoLbl.setText(passedLbl);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jMenuItem1 = new javax.swing.JMenuItem();
        AppPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        productsBtn = new javax.swing.JButton();
        issueBtn1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        infoLbl = new javax.swing.JLabel();
        usernameLbl = new javax.swing.JLabel();
        cardPanel = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        updateEmployeePanel = new javax.swing.JPanel();
        IssuePanel2 = new javax.swing.JPanel();
        addProductPanel2 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        updateEmployeeBtn = new javax.swing.JButton();
        employeeNameTxtUpdate = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        productSerialNoTxtUpdate = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        departmentNameTxtUpdate2 = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        stockPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        stockTable = new javax.swing.JTable();
        refreshBtn1 = new javax.swing.JButton();
        issueStockBtn = new javax.swing.JButton();
        productsAndEmployeePanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        employeesAndProductsTable = new javax.swing.JTable();
        refreshBtn = new javax.swing.JButton();
        jLabel26 = new javax.swing.JLabel();
        searchByCombo = new javax.swing.JComboBox<>();
        deleteEmployeeAndProductBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        searchTxt = new javax.swing.JTextField();
        DepartmentPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        departmentsTable = new javax.swing.JTable();
        updateDepartmentsBtn = new javax.swing.JButton();
        refreshDepartmentsBtn = new javax.swing.JButton();
        addDepartmentBtn = new javax.swing.JButton();
        deleteDepartmentBtn = new javax.swing.JButton();
        employeePanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        employeesTable = new javax.swing.JTable();
        updateDepartmentsBtn1 = new javax.swing.JButton();
        refreshEmployeesBtn = new javax.swing.JButton();
        addDepartmentBtn1 = new javax.swing.JButton();
        deleteEmployeeBtn = new javax.swing.JButton();
        searchEmployeeTxt = new javax.swing.JTextField();
        searchEmployeeBtn = new javax.swing.JButton();
        locationPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        locationTable = new javax.swing.JTable();
        updateLocationBtn = new javax.swing.JButton();
        refreshLocationBtn = new javax.swing.JButton();
        addLocationBtn = new javax.swing.JButton();
        deleteLocationBtn = new javax.swing.JButton();
        categoryPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        categoryTable = new javax.swing.JTable();
        updateCategoryBtn = new javax.swing.JButton();
        refreshCategoryBtn = new javax.swing.JButton();
        addCategoryBtn = new javax.swing.JButton();
        deleteCategoryBtn = new javax.swing.JButton();
        campusPanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        campusTable = new javax.swing.JTable();
        updateCategoryBtn1 = new javax.swing.JButton();
        refreshCampusBtn = new javax.swing.JButton();
        addCampusBtn = new javax.swing.JButton();
        deleteCampusBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        reportForEmployee = new javax.swing.JMenuItem();
        adminRoleBtn = new javax.swing.JMenu();
        addStockBtn = new javax.swing.JMenuItem();
        employeeMenuBtn = new javax.swing.JMenuItem();
        updateProductMenuItem = new javax.swing.JMenuItem();
        superAdminBtn = new javax.swing.JMenu();
        categoryMenuBtn = new javax.swing.JMenuItem();
        locationMenuBtn = new javax.swing.JMenuItem();
        DepartmentPanelMenuBtn = new javax.swing.JMenuItem();
        showUsersMenuBtn = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ICT Inventory");
        setBackground(new java.awt.Color(37, 37, 37));

        AppPanel.setBackground(new java.awt.Color(37, 37, 37));
        AppPanel.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        AppPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(253, 253, 253));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(177, 177, 177)));
        jPanel1.setMaximumSize(new java.awt.Dimension(113, 32767));
        jPanel1.setPreferredSize(new java.awt.Dimension(32767, 50));

        productsBtn.setBackground(new java.awt.Color(66, 66, 66));
        productsBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        productsBtn.setForeground(new java.awt.Color(91, 91, 91));
        productsBtn.setText("Issued Products");
        productsBtn.setBorder(null);
        productsBtn.setBorderPainted(false);
        productsBtn.setContentAreaFilled(false);
        productsBtn.setFocusPainted(false);
        productsBtn.setPreferredSize(new java.awt.Dimension(75, 50));
        productsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsBtnMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                productsBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                productsBtnMouseEntered(evt);
            }
        });
        productsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productsBtnActionPerformed(evt);
            }
        });

        issueBtn1.setBackground(java.awt.Color.white);
        issueBtn1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        issueBtn1.setForeground(new java.awt.Color(91, 91, 91));
        issueBtn1.setText("Stock");
        issueBtn1.setBorder(null);
        issueBtn1.setBorderPainted(false);
        issueBtn1.setContentAreaFilled(false);
        issueBtn1.setFocusPainted(false);
        issueBtn1.setPreferredSize(new java.awt.Dimension(75, 50));
        issueBtn1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                issueBtn1FocusGained(evt);
            }
        });
        issueBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueBtn1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                issueBtn1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                issueBtn1MouseEntered(evt);
            }
        });
        issueBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBtn1ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(254, 254, 254));
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel6.setBackground(java.awt.Color.blue);
        jLabel6.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(107, 107, 107));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("System");
        jPanel4.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 75, 30));

        jLabel3.setBackground(java.awt.Color.blue);
        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(107, 107, 107));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Inventory");
        jPanel4.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, -1, 30));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(2, 40, 85));
        jLabel1.setText("ICT");
        jPanel4.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 50));

        jButton1.setBackground(java.awt.Color.blue);
        jButton1.setForeground(java.awt.Color.white);
        jButton1.setText("Logout");
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setOpaque(true);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(issueBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8320, 8320, 8320)
                .addComponent(jButton1)
                .addContainerGap(22970, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(issueBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(productsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        AppPanel.add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel3.setBackground(new java.awt.Color(37, 37, 37));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(70, 70, 70)));
        jPanel3.setPreferredSize(new java.awt.Dimension(887, 30));

        infoLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        infoLbl.setForeground(new java.awt.Color(255, 255, 255));
        infoLbl.setText("Info");

        usernameLbl.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        usernameLbl.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(infoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(259, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(infoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
            .addComponent(usernameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        AppPanel.add(jPanel3, java.awt.BorderLayout.PAGE_END);

        cardPanel.setBackground(java.awt.Color.white);
        cardPanel.setLayout(new java.awt.CardLayout());

        jPanel15.setBackground(java.awt.Color.white);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, Short.MAX_VALUE, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 934, Short.MAX_VALUE)
        );

        cardPanel.add(jPanel15, "card12");

        updateEmployeePanel.setBackground(java.awt.Color.white);
        updateEmployeePanel.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(197, 197, 197)));
        updateEmployeePanel.setPreferredSize(new java.awt.Dimension(935, 50));

        addProductPanel2.setBackground(java.awt.Color.white);
        addProductPanel2.setLayout(new java.awt.GridBagLayout());

        javax.swing.GroupLayout IssuePanel2Layout = new javax.swing.GroupLayout(IssuePanel2);
        IssuePanel2.setLayout(IssuePanel2Layout);
        IssuePanel2Layout.setHorizontalGroup(
            IssuePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addProductPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 835, Short.MAX_VALUE)
        );
        IssuePanel2Layout.setVerticalGroup(
            IssuePanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(addProductPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel9.setOpaque(false);

        updateEmployeeBtn.setBackground(new java.awt.Color(13, 101, 205));
        updateEmployeeBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateEmployeeBtn.setForeground(new java.awt.Color(255, 255, 255));
        updateEmployeeBtn.setText(" Update Employee");
        updateEmployeeBtn.setBorder(null);
        updateEmployeeBtn.setBorderPainted(false);
        updateEmployeeBtn.setContentAreaFilled(false);
        updateEmployeeBtn.setFocusPainted(false);
        updateEmployeeBtn.setOpaque(true);
        updateEmployeeBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        updateEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEmployeeBtnActionPerformed(evt);
            }
        });

        employeeNameTxtUpdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        employeeNameTxtUpdate.setPreferredSize(new java.awt.Dimension(6, 29));

        jLabel30.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(64, 64, 64));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel30.setText("Update Employee");
        jLabel30.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jLabel34.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(64, 64, 64));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel34.setText("Name:");

        productSerialNoTxtUpdate.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        productSerialNoTxtUpdate.setForeground(new java.awt.Color(64, 64, 64));
        productSerialNoTxtUpdate.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        productSerialNoTxtUpdate.setText("ID");

        jLabel37.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel37.setForeground(new java.awt.Color(64, 64, 64));
        jLabel37.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel37.setText("Product Serial No:");

        departmentNameTxtUpdate2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "WORKS" }));

        jLabel38.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(64, 64, 64));
        jLabel38.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel38.setText("Department:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addGap(17, 17, 17)
                        .addComponent(productSerialNoTxtUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(employeeNameTxtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(departmentNameTxtUpdate2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(68, 68, 68))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(updateEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 107, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel30)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productSerialNoTxtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeNameTxtUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(departmentNameTxtUpdate2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addComponent(updateEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(230, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout updateEmployeePanelLayout = new javax.swing.GroupLayout(updateEmployeePanel);
        updateEmployeePanel.setLayout(updateEmployeePanelLayout);
        updateEmployeePanelLayout.setHorizontalGroup(
            updateEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateEmployeePanelLayout.createSequentialGroup()
                .addGap(287, 287, 287)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31940, Short.MAX_VALUE))
            .addGroup(updateEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateEmployeePanelLayout.createSequentialGroup()
                    .addGap(0, 31931, Short.MAX_VALUE)
                    .addComponent(IssuePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        updateEmployeePanelLayout.setVerticalGroup(
            updateEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateEmployeePanelLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(462, Short.MAX_VALUE))
            .addGroup(updateEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(updateEmployeePanelLayout.createSequentialGroup()
                    .addGap(0, 466, Short.MAX_VALUE)
                    .addComponent(IssuePanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 467, Short.MAX_VALUE)))
        );

        cardPanel.add(updateEmployeePanel, "card4");

        stockPanel.setBackground(java.awt.Color.white);
        stockPanel.setOpaque(false);

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(78, 78, 78));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Available stock");
        jLabel9.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        stockTable.setAutoCreateRowSorter(true);
        stockTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        stockTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Serial Number", "Model", "Name", "Description", "Category", "Location", "Date added in stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stockTable.setColumnSelectionAllowed(true);
        stockTable.setRowHeight(30);
        stockTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stockTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(stockTable);
        stockTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        refreshBtn1.setBackground(java.awt.Color.blue);
        refreshBtn1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshBtn1.setForeground(new java.awt.Color(254, 254, 254));
        refreshBtn1.setText("Refresh");
        refreshBtn1.setBorder(null);
        refreshBtn1.setBorderPainted(false);
        refreshBtn1.setContentAreaFilled(false);
        refreshBtn1.setFocusPainted(false);
        refreshBtn1.setOpaque(true);
        refreshBtn1.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshBtn1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshBtn1MouseEntered(evt);
            }
        });
        refreshBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtn1ActionPerformed(evt);
            }
        });

        issueStockBtn.setBackground(java.awt.Color.blue);
        issueStockBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        issueStockBtn.setForeground(new java.awt.Color(254, 254, 254));
        issueStockBtn.setText("Issue");
        issueStockBtn.setBorder(null);
        issueStockBtn.setBorderPainted(false);
        issueStockBtn.setContentAreaFilled(false);
        issueStockBtn.setFocusPainted(false);
        issueStockBtn.setOpaque(true);
        issueStockBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        issueStockBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                issueStockBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                issueStockBtnMouseEntered(evt);
            }
        });
        issueStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueStockBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout stockPanelLayout = new javax.swing.GroupLayout(stockPanel);
        stockPanel.setLayout(stockPanelLayout);
        stockPanelLayout.setHorizontalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32267, Short.MAX_VALUE)
                .addComponent(issueStockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(refreshBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addComponent(jScrollPane4)
        );
        stockPanelLayout.setVerticalGroup(
            stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(stockPanelLayout.createSequentialGroup()
                .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(issueStockBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(stockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(refreshBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 839, Short.MAX_VALUE)
                .addGap(50, 50, 50))
        );

        cardPanel.add(stockPanel, "card3");

        productsAndEmployeePanel.setBackground(java.awt.Color.white);
        productsAndEmployeePanel.setOpaque(false);

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(78, 78, 78));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Employees and Products");
        jLabel8.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane1.setBackground(new java.awt.Color(254, 254, 254));

        employeesAndProductsTable.setAutoCreateRowSorter(true);
        employeesAndProductsTable.setBackground(new java.awt.Color(254, 254, 254));
        employeesAndProductsTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        employeesAndProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Serial Number", "Model", "Product Name", "Description", "Category", "Location", "Employee Name", "Date Issued", "Issued By"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeesAndProductsTable.setColumnSelectionAllowed(true);
        employeesAndProductsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        employeesAndProductsTable.setGridColor(new java.awt.Color(220, 220, 220));
        employeesAndProductsTable.setRowHeight(30);
        employeesAndProductsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        employeesAndProductsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeesAndProductsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(employeesAndProductsTable);
        employeesAndProductsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        refreshBtn.setBackground(java.awt.Color.blue);
        refreshBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshBtn.setText("Refresh");
        refreshBtn.setBorder(null);
        refreshBtn.setBorderPainted(false);
        refreshBtn.setContentAreaFilled(false);
        refreshBtn.setFocusPainted(false);
        refreshBtn.setOpaque(true);
        refreshBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshBtnMouseEntered(evt);
            }
        });
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel26.setText("Search by:");

        searchByCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Product Serial No", "Model", "Product Name", "Employee Name", "Description" }));
        searchByCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByComboActionPerformed(evt);
            }
        });

        deleteEmployeeAndProductBtn.setBackground(java.awt.Color.red);
        deleteEmployeeAndProductBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteEmployeeAndProductBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteEmployeeAndProductBtn.setText("Delete");
        deleteEmployeeAndProductBtn.setBorder(null);
        deleteEmployeeAndProductBtn.setBorderPainted(false);
        deleteEmployeeAndProductBtn.setContentAreaFilled(false);
        deleteEmployeeAndProductBtn.setFocusPainted(false);
        deleteEmployeeAndProductBtn.setOpaque(true);
        deleteEmployeeAndProductBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteEmployeeAndProductBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteEmployeeAndProductBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteEmployeeAndProductBtnMouseEntered(evt);
            }
        });
        deleteEmployeeAndProductBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeAndProductBtnActionPerformed(evt);
            }
        });

        updateBtn.setBackground(java.awt.Color.blue);
        updateBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateBtn.setForeground(new java.awt.Color(254, 254, 254));
        updateBtn.setText("Update Product");
        updateBtn.setBorder(null);
        updateBtn.setBorderPainted(false);
        updateBtn.setContentAreaFilled(false);
        updateBtn.setFocusPainted(false);
        updateBtn.setOpaque(true);
        updateBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        updateBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateBtnMouseEntered(evt);
            }
        });
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        searchBtn.setBackground(java.awt.Color.blue);
        searchBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchBtn.setForeground(new java.awt.Color(254, 254, 254));
        searchBtn.setText("Search");
        searchBtn.setBorder(null);
        searchBtn.setBorderPainted(false);
        searchBtn.setContentAreaFilled(false);
        searchBtn.setFocusPainted(false);
        searchBtn.setOpaque(true);
        searchBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        searchBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchBtnMouseEntered(evt);
            }
        });
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        searchTxt.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchTxt.setPreferredSize(new java.awt.Dimension(6, 29));

        javax.swing.GroupLayout productsAndEmployeePanelLayout = new javax.swing.GroupLayout(productsAndEmployeePanel);
        productsAndEmployeePanel.setLayout(productsAndEmployeePanelLayout);
        productsAndEmployeePanelLayout.setHorizontalGroup(
            productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteEmployeeAndProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21))))
            .addComponent(jScrollPane1)
        );
        productsAndEmployeePanelLayout.setVerticalGroup(
            productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteEmployeeAndProductBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addGroup(productsAndEmployeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(productsAndEmployeePanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(searchByCombo))
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 844, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(productsAndEmployeePanel, "card3");

        DepartmentPanel.setBackground(java.awt.Color.white);
        DepartmentPanel.setOpaque(false);

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(78, 78, 78));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel10.setText("Departments");
        jLabel10.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane2.setBackground(new java.awt.Color(254, 254, 254));

        departmentsTable.setAutoCreateRowSorter(true);
        departmentsTable.setBackground(new java.awt.Color(254, 254, 254));
        departmentsTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        departmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Department Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        departmentsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        departmentsTable.setGridColor(new java.awt.Color(220, 220, 220));
        departmentsTable.setRowHeight(30);
        departmentsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                departmentsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(departmentsTable);
        departmentsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        updateDepartmentsBtn.setBackground(java.awt.Color.blue);
        updateDepartmentsBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateDepartmentsBtn.setForeground(new java.awt.Color(254, 254, 254));
        updateDepartmentsBtn.setText("Update");
        updateDepartmentsBtn.setBorder(null);
        updateDepartmentsBtn.setBorderPainted(false);
        updateDepartmentsBtn.setContentAreaFilled(false);
        updateDepartmentsBtn.setFocusPainted(false);
        updateDepartmentsBtn.setOpaque(true);
        updateDepartmentsBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        updateDepartmentsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateDepartmentsBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateDepartmentsBtnMouseEntered(evt);
            }
        });
        updateDepartmentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDepartmentsBtnActionPerformed(evt);
            }
        });

        refreshDepartmentsBtn.setBackground(java.awt.Color.blue);
        refreshDepartmentsBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshDepartmentsBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshDepartmentsBtn.setText("Refresh");
        refreshDepartmentsBtn.setBorder(null);
        refreshDepartmentsBtn.setBorderPainted(false);
        refreshDepartmentsBtn.setContentAreaFilled(false);
        refreshDepartmentsBtn.setFocusPainted(false);
        refreshDepartmentsBtn.setOpaque(true);
        refreshDepartmentsBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshDepartmentsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshDepartmentsBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshDepartmentsBtnMouseEntered(evt);
            }
        });
        refreshDepartmentsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshDepartmentsBtnActionPerformed(evt);
            }
        });

        addDepartmentBtn.setBackground(java.awt.Color.blue);
        addDepartmentBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addDepartmentBtn.setForeground(new java.awt.Color(254, 254, 254));
        addDepartmentBtn.setText("Add");
        addDepartmentBtn.setBorder(null);
        addDepartmentBtn.setBorderPainted(false);
        addDepartmentBtn.setContentAreaFilled(false);
        addDepartmentBtn.setFocusPainted(false);
        addDepartmentBtn.setOpaque(true);
        addDepartmentBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        addDepartmentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addDepartmentBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addDepartmentBtnMouseEntered(evt);
            }
        });
        addDepartmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDepartmentBtnActionPerformed(evt);
            }
        });

        deleteDepartmentBtn.setBackground(java.awt.Color.red);
        deleteDepartmentBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteDepartmentBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteDepartmentBtn.setText("Delete");
        deleteDepartmentBtn.setBorder(null);
        deleteDepartmentBtn.setBorderPainted(false);
        deleteDepartmentBtn.setContentAreaFilled(false);
        deleteDepartmentBtn.setFocusPainted(false);
        deleteDepartmentBtn.setOpaque(true);
        deleteDepartmentBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteDepartmentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteDepartmentBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteDepartmentBtnMouseEntered(evt);
            }
        });
        deleteDepartmentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteDepartmentBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout DepartmentPanelLayout = new javax.swing.GroupLayout(DepartmentPanel);
        DepartmentPanel.setLayout(DepartmentPanelLayout);
        DepartmentPanelLayout.setHorizontalGroup(
            DepartmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DepartmentPanelLayout.createSequentialGroup()
                .addGroup(DepartmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(DepartmentPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(updateDepartmentsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDepartmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteDepartmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(refreshDepartmentsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 167, Short.MAX_VALUE))
        );
        DepartmentPanelLayout.setVerticalGroup(
            DepartmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DepartmentPanelLayout.createSequentialGroup()
                .addGroup(DepartmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(DepartmentPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(DepartmentPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateDepartmentsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshDepartmentsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addDepartmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteDepartmentBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(DepartmentPanel, "card3");

        employeePanel.setBackground(java.awt.Color.white);
        employeePanel.setOpaque(false);

        jLabel11.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(78, 78, 78));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Employees");
        jLabel11.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane6.setBackground(new java.awt.Color(254, 254, 254));

        employeesTable.setAutoCreateRowSorter(true);
        employeesTable.setBackground(new java.awt.Color(254, 254, 254));
        employeesTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        employeesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Department Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeesTable.setColumnSelectionAllowed(true);
        employeesTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        employeesTable.setGridColor(new java.awt.Color(220, 220, 220));
        employeesTable.setRowHeight(30);
        employeesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                employeesTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(employeesTable);
        employeesTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        updateDepartmentsBtn1.setBackground(java.awt.Color.blue);
        updateDepartmentsBtn1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateDepartmentsBtn1.setForeground(new java.awt.Color(254, 254, 254));
        updateDepartmentsBtn1.setText("Update");
        updateDepartmentsBtn1.setBorder(null);
        updateDepartmentsBtn1.setBorderPainted(false);
        updateDepartmentsBtn1.setContentAreaFilled(false);
        updateDepartmentsBtn1.setFocusPainted(false);
        updateDepartmentsBtn1.setOpaque(true);
        updateDepartmentsBtn1.setPreferredSize(new java.awt.Dimension(75, 29));
        updateDepartmentsBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateDepartmentsBtn1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateDepartmentsBtn1MouseEntered(evt);
            }
        });
        updateDepartmentsBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateDepartmentsBtn1ActionPerformed(evt);
            }
        });

        refreshEmployeesBtn.setBackground(java.awt.Color.blue);
        refreshEmployeesBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshEmployeesBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshEmployeesBtn.setText("Refresh");
        refreshEmployeesBtn.setBorder(null);
        refreshEmployeesBtn.setBorderPainted(false);
        refreshEmployeesBtn.setContentAreaFilled(false);
        refreshEmployeesBtn.setFocusPainted(false);
        refreshEmployeesBtn.setOpaque(true);
        refreshEmployeesBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshEmployeesBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshEmployeesBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshEmployeesBtnMouseEntered(evt);
            }
        });
        refreshEmployeesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshEmployeesBtnActionPerformed(evt);
            }
        });

        addDepartmentBtn1.setBackground(java.awt.Color.blue);
        addDepartmentBtn1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addDepartmentBtn1.setForeground(new java.awt.Color(254, 254, 254));
        addDepartmentBtn1.setText("Add");
        addDepartmentBtn1.setBorder(null);
        addDepartmentBtn1.setBorderPainted(false);
        addDepartmentBtn1.setContentAreaFilled(false);
        addDepartmentBtn1.setFocusPainted(false);
        addDepartmentBtn1.setOpaque(true);
        addDepartmentBtn1.setPreferredSize(new java.awt.Dimension(75, 29));
        addDepartmentBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addDepartmentBtn1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addDepartmentBtn1MouseEntered(evt);
            }
        });
        addDepartmentBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDepartmentBtn1ActionPerformed(evt);
            }
        });

        deleteEmployeeBtn.setBackground(java.awt.Color.red);
        deleteEmployeeBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteEmployeeBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteEmployeeBtn.setText("Delete");
        deleteEmployeeBtn.setBorder(null);
        deleteEmployeeBtn.setBorderPainted(false);
        deleteEmployeeBtn.setContentAreaFilled(false);
        deleteEmployeeBtn.setFocusPainted(false);
        deleteEmployeeBtn.setOpaque(true);
        deleteEmployeeBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteEmployeeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteEmployeeBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteEmployeeBtnMouseEntered(evt);
            }
        });
        deleteEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeBtnActionPerformed(evt);
            }
        });

        searchEmployeeTxt.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchEmployeeTxt.setPreferredSize(new java.awt.Dimension(6, 29));

        searchEmployeeBtn.setBackground(java.awt.Color.blue);
        searchEmployeeBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        searchEmployeeBtn.setForeground(new java.awt.Color(254, 254, 254));
        searchEmployeeBtn.setText("Search");
        searchEmployeeBtn.setBorder(null);
        searchEmployeeBtn.setBorderPainted(false);
        searchEmployeeBtn.setContentAreaFilled(false);
        searchEmployeeBtn.setFocusPainted(false);
        searchEmployeeBtn.setOpaque(true);
        searchEmployeeBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        searchEmployeeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchEmployeeBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchEmployeeBtnMouseEntered(evt);
            }
        });
        searchEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchEmployeeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout employeePanelLayout = new javax.swing.GroupLayout(employeePanel);
        employeePanel.setLayout(employeePanelLayout);
        employeePanelLayout.setHorizontalGroup(
            employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeePanelLayout.createSequentialGroup()
                .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(employeePanelLayout.createSequentialGroup()
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchEmployeeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(employeePanelLayout.createSequentialGroup()
                        .addComponent(updateDepartmentsBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDepartmentBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshEmployeesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32143, Short.MAX_VALUE))
            .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        employeePanelLayout.setVerticalGroup(
            employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeePanelLayout.createSequentialGroup()
                .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchEmployeeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateDepartmentsBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDepartmentBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshEmployeesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 834, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(employeePanel, "card3");

        locationPanel.setBackground(java.awt.Color.white);
        locationPanel.setOpaque(false);

        jLabel12.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(78, 78, 78));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Location");
        jLabel12.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane5.setBackground(new java.awt.Color(254, 254, 254));

        locationTable.setAutoCreateRowSorter(true);
        locationTable.setBackground(new java.awt.Color(254, 254, 254));
        locationTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        locationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Location Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        locationTable.setColumnSelectionAllowed(true);
        locationTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        locationTable.setGridColor(new java.awt.Color(220, 220, 220));
        locationTable.setRowHeight(30);
        locationTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                locationTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(locationTable);
        locationTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        updateLocationBtn.setBackground(java.awt.Color.blue);
        updateLocationBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateLocationBtn.setForeground(new java.awt.Color(254, 254, 254));
        updateLocationBtn.setText("Update");
        updateLocationBtn.setBorder(null);
        updateLocationBtn.setBorderPainted(false);
        updateLocationBtn.setContentAreaFilled(false);
        updateLocationBtn.setFocusPainted(false);
        updateLocationBtn.setOpaque(true);
        updateLocationBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        updateLocationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateLocationBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateLocationBtnMouseEntered(evt);
            }
        });
        updateLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateLocationBtnActionPerformed(evt);
            }
        });

        refreshLocationBtn.setBackground(java.awt.Color.blue);
        refreshLocationBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshLocationBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshLocationBtn.setText("Refresh");
        refreshLocationBtn.setBorder(null);
        refreshLocationBtn.setBorderPainted(false);
        refreshLocationBtn.setContentAreaFilled(false);
        refreshLocationBtn.setFocusPainted(false);
        refreshLocationBtn.setOpaque(true);
        refreshLocationBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshLocationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshLocationBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshLocationBtnMouseEntered(evt);
            }
        });
        refreshLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshLocationBtnActionPerformed(evt);
            }
        });

        addLocationBtn.setBackground(java.awt.Color.blue);
        addLocationBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addLocationBtn.setForeground(new java.awt.Color(254, 254, 254));
        addLocationBtn.setText("Add");
        addLocationBtn.setBorder(null);
        addLocationBtn.setBorderPainted(false);
        addLocationBtn.setContentAreaFilled(false);
        addLocationBtn.setFocusPainted(false);
        addLocationBtn.setOpaque(true);
        addLocationBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        addLocationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addLocationBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addLocationBtnMouseEntered(evt);
            }
        });
        addLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLocationBtnActionPerformed(evt);
            }
        });

        deleteLocationBtn.setBackground(java.awt.Color.red);
        deleteLocationBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteLocationBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteLocationBtn.setText("Delete");
        deleteLocationBtn.setBorder(null);
        deleteLocationBtn.setBorderPainted(false);
        deleteLocationBtn.setContentAreaFilled(false);
        deleteLocationBtn.setFocusPainted(false);
        deleteLocationBtn.setOpaque(true);
        deleteLocationBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteLocationBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteLocationBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteLocationBtnMouseEntered(evt);
            }
        });
        deleteLocationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteLocationBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout locationPanelLayout = new javax.swing.GroupLayout(locationPanel);
        locationPanel.setLayout(locationPanelLayout);
        locationPanelLayout.setHorizontalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(updateLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(refreshLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 167, Short.MAX_VALUE))
        );
        locationPanelLayout.setVerticalGroup(
            locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(locationPanelLayout.createSequentialGroup()
                .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(locationPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(locationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteLocationBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(locationPanel, "card3");

        categoryPanel.setBackground(java.awt.Color.white);
        categoryPanel.setOpaque(false);

        jLabel13.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(78, 78, 78));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Category");
        jLabel13.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane7.setBackground(new java.awt.Color(254, 254, 254));

        categoryTable.setAutoCreateRowSorter(true);
        categoryTable.setBackground(new java.awt.Color(254, 254, 254));
        categoryTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        categoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Category Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        categoryTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        categoryTable.setGridColor(new java.awt.Color(220, 220, 220));
        categoryTable.setRowHeight(30);
        categoryTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                categoryTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(categoryTable);
        categoryTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        updateCategoryBtn.setBackground(java.awt.Color.blue);
        updateCategoryBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateCategoryBtn.setForeground(new java.awt.Color(254, 254, 254));
        updateCategoryBtn.setText("Update");
        updateCategoryBtn.setBorder(null);
        updateCategoryBtn.setBorderPainted(false);
        updateCategoryBtn.setContentAreaFilled(false);
        updateCategoryBtn.setFocusPainted(false);
        updateCategoryBtn.setOpaque(true);
        updateCategoryBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        updateCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateCategoryBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateCategoryBtnMouseEntered(evt);
            }
        });
        updateCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoryBtnActionPerformed(evt);
            }
        });

        refreshCategoryBtn.setBackground(java.awt.Color.blue);
        refreshCategoryBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshCategoryBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshCategoryBtn.setText("Refresh");
        refreshCategoryBtn.setBorder(null);
        refreshCategoryBtn.setBorderPainted(false);
        refreshCategoryBtn.setContentAreaFilled(false);
        refreshCategoryBtn.setFocusPainted(false);
        refreshCategoryBtn.setOpaque(true);
        refreshCategoryBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshCategoryBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshCategoryBtnMouseEntered(evt);
            }
        });
        refreshCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshCategoryBtnActionPerformed(evt);
            }
        });

        addCategoryBtn.setBackground(java.awt.Color.blue);
        addCategoryBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addCategoryBtn.setForeground(new java.awt.Color(254, 254, 254));
        addCategoryBtn.setText("Add");
        addCategoryBtn.setBorder(null);
        addCategoryBtn.setBorderPainted(false);
        addCategoryBtn.setContentAreaFilled(false);
        addCategoryBtn.setFocusPainted(false);
        addCategoryBtn.setOpaque(true);
        addCategoryBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        addCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addCategoryBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addCategoryBtnMouseEntered(evt);
            }
        });
        addCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryBtnActionPerformed(evt);
            }
        });

        deleteCategoryBtn.setBackground(java.awt.Color.red);
        deleteCategoryBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteCategoryBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteCategoryBtn.setText("Delete");
        deleteCategoryBtn.setBorder(null);
        deleteCategoryBtn.setBorderPainted(false);
        deleteCategoryBtn.setContentAreaFilled(false);
        deleteCategoryBtn.setFocusPainted(false);
        deleteCategoryBtn.setOpaque(true);
        deleteCategoryBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteCategoryBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteCategoryBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteCategoryBtnMouseEntered(evt);
            }
        });
        deleteCategoryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCategoryBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout categoryPanelLayout = new javax.swing.GroupLayout(categoryPanel);
        categoryPanel.setLayout(categoryPanelLayout);
        categoryPanelLayout.setHorizontalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryPanelLayout.createSequentialGroup()
                .addGroup(categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(categoryPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(updateCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(73, 73, 73)
                        .addComponent(refreshCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 736, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 167, Short.MAX_VALUE))
        );
        categoryPanelLayout.setVerticalGroup(
            categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(categoryPanelLayout.createSequentialGroup()
                .addGroup(categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(categoryPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(categoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCategoryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(categoryPanel, "card3");

        campusPanel.setBackground(java.awt.Color.white);
        campusPanel.setOpaque(false);

        jLabel14.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(78, 78, 78));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel14.setText("Campus");
        jLabel14.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(2, 0, 0, 0, java.awt.Color.blue), javax.swing.BorderFactory.createEmptyBorder(1, 9, 1, 1)));

        jScrollPane9.setBackground(new java.awt.Color(254, 254, 254));

        campusTable.setAutoCreateRowSorter(true);
        campusTable.setBackground(new java.awt.Color(254, 254, 254));
        campusTable.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        campusTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null}
            },
            new String [] {
                "Campus Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        campusTable.setColumnSelectionAllowed(true);
        campusTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        campusTable.setGridColor(new java.awt.Color(220, 220, 220));
        campusTable.setRowHeight(30);
        campusTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                campusTableMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(campusTable);
        campusTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        updateCategoryBtn1.setBackground(java.awt.Color.blue);
        updateCategoryBtn1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        updateCategoryBtn1.setForeground(new java.awt.Color(254, 254, 254));
        updateCategoryBtn1.setText("Update");
        updateCategoryBtn1.setBorder(null);
        updateCategoryBtn1.setBorderPainted(false);
        updateCategoryBtn1.setContentAreaFilled(false);
        updateCategoryBtn1.setFocusPainted(false);
        updateCategoryBtn1.setOpaque(true);
        updateCategoryBtn1.setPreferredSize(new java.awt.Dimension(75, 29));
        updateCategoryBtn1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                updateCategoryBtn1MouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                updateCategoryBtn1MouseEntered(evt);
            }
        });
        updateCategoryBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCategoryBtn1ActionPerformed(evt);
            }
        });

        refreshCampusBtn.setBackground(java.awt.Color.blue);
        refreshCampusBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        refreshCampusBtn.setForeground(new java.awt.Color(254, 254, 254));
        refreshCampusBtn.setText("Refresh");
        refreshCampusBtn.setBorder(null);
        refreshCampusBtn.setBorderPainted(false);
        refreshCampusBtn.setContentAreaFilled(false);
        refreshCampusBtn.setFocusPainted(false);
        refreshCampusBtn.setOpaque(true);
        refreshCampusBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        refreshCampusBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                refreshCampusBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                refreshCampusBtnMouseEntered(evt);
            }
        });
        refreshCampusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshCampusBtnActionPerformed(evt);
            }
        });

        addCampusBtn.setBackground(java.awt.Color.blue);
        addCampusBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        addCampusBtn.setForeground(new java.awt.Color(254, 254, 254));
        addCampusBtn.setText("Add");
        addCampusBtn.setBorder(null);
        addCampusBtn.setBorderPainted(false);
        addCampusBtn.setContentAreaFilled(false);
        addCampusBtn.setFocusPainted(false);
        addCampusBtn.setOpaque(true);
        addCampusBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        addCampusBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                addCampusBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                addCampusBtnMouseEntered(evt);
            }
        });
        addCampusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCampusBtnActionPerformed(evt);
            }
        });

        deleteCampusBtn.setBackground(java.awt.Color.red);
        deleteCampusBtn.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        deleteCampusBtn.setForeground(new java.awt.Color(254, 254, 254));
        deleteCampusBtn.setText("Delete");
        deleteCampusBtn.setBorder(null);
        deleteCampusBtn.setBorderPainted(false);
        deleteCampusBtn.setContentAreaFilled(false);
        deleteCampusBtn.setFocusPainted(false);
        deleteCampusBtn.setOpaque(true);
        deleteCampusBtn.setPreferredSize(new java.awt.Dimension(75, 29));
        deleteCampusBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                deleteCampusBtnMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                deleteCampusBtnMouseEntered(evt);
            }
        });
        deleteCampusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCampusBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout campusPanelLayout = new javax.swing.GroupLayout(campusPanel);
        campusPanel.setLayout(campusPanelLayout);
        campusPanelLayout.setHorizontalGroup(
            campusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(campusPanelLayout.createSequentialGroup()
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(updateCategoryBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addComponent(refreshCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 32039, Short.MAX_VALUE))
            .addComponent(jScrollPane9, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        campusPanelLayout.setVerticalGroup(
            campusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(campusPanelLayout.createSequentialGroup()
                .addGroup(campusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(campusPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(campusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(updateCategoryBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteCampusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 865, Short.MAX_VALUE)
                .addContainerGap())
        );

        cardPanel.add(campusPanel, "card3");

        AppPanel.add(cardPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(AppPanel, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(1, 1, 1));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuBar1.setForeground(new java.awt.Color(254, 254, 254));
        jMenuBar1.setBorderPainted(false);

        jMenu1.setText("File");

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenu5.setText("Reports");

        reportForEmployee.setText("All Employees and their products");
        reportForEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportForEmployeeActionPerformed(evt);
            }
        });
        jMenu5.add(reportForEmployee);

        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        adminRoleBtn.setText("Admin");

        addStockBtn.setText("Add Stock");
        addStockBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStockBtnActionPerformed(evt);
            }
        });
        adminRoleBtn.add(addStockBtn);

        employeeMenuBtn.setText("Employees");
        employeeMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeMenuBtnActionPerformed(evt);
            }
        });
        adminRoleBtn.add(employeeMenuBtn);

        updateProductMenuItem.setText("Update Product");
        updateProductMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateProductMenuItemActionPerformed(evt);
            }
        });
        adminRoleBtn.add(updateProductMenuItem);

        jMenuBar1.add(adminRoleBtn);

        superAdminBtn.setText("Super Admin");

        categoryMenuBtn.setText("Category");
        categoryMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryMenuBtnActionPerformed(evt);
            }
        });
        superAdminBtn.add(categoryMenuBtn);

        locationMenuBtn.setText("Location");
        locationMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationMenuBtnActionPerformed(evt);
            }
        });
        superAdminBtn.add(locationMenuBtn);

        DepartmentPanelMenuBtn.setText("Departments");
        DepartmentPanelMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepartmentPanelMenuBtnActionPerformed(evt);
            }
        });
        superAdminBtn.add(DepartmentPanelMenuBtn);

        showUsersMenuBtn.setText("Show Users");
        showUsersMenuBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showUsersMenuBtnActionPerformed(evt);
            }
        });
        superAdminBtn.add(showUsersMenuBtn);

        jMenuBar1.add(superAdminBtn);

        jMenu3.setText("Help");

        jMenuItem3.setText("About");
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void refreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnActionPerformed
        // TODO add your handling code here:'
        show_employeesAndProducts();


    }//GEN-LAST:event_refreshBtnActionPerformed

    private void productsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsBtnMouseClicked
          
    }//GEN-LAST:event_productsBtnMouseClicked

    private void employeesAndProductsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeesAndProductsTableMouseClicked


    }//GEN-LAST:event_employeesAndProductsTableMouseClicked

    private void showUsersMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showUsersMenuBtnActionPerformed
        // TODO add your handling code here:
        ModifyUsersFrm openFrm = new ModifyUsersFrm();
        openFrm.setVisible(true);
    }//GEN-LAST:event_showUsersMenuBtnActionPerformed

    private void refreshBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtnMouseEntered
        refreshBtn.setBackground(java.awt.Color.gray);
    }//GEN-LAST:event_refreshBtnMouseEntered
 
    private void refreshBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtnMouseExited
        refreshBtn.setBackground(java.awt.Color.blue);
    }//GEN-LAST:event_refreshBtnMouseExited

    private void productsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsBtnMouseEntered
        productsBtn.setForeground(new java.awt.Color(1, 1, 1));

    }//GEN-LAST:event_productsBtnMouseEntered
 
    private void productsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsBtnMouseExited
        productsBtn.setForeground(new java.awt.Color(91, 91, 91));

    }//GEN-LAST:event_productsBtnMouseExited

    private void productsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productsBtnActionPerformed
        cardPanel.removeAll();
        cardPanel.add(productsAndEmployeePanel);
        refreshBtn.doClick();
        cardPanel.repaint();
        cardPanel.revalidate();
        
    }//GEN-LAST:event_productsBtnActionPerformed

    private void reportForEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportForEmployeeActionPerformed
      

         try {
             //                      JasperDesign jdesign = JRXmlLoader.load("/InventoryICT/reportsforinventory/issued.jrxml");
             JasperDesign jdesign = JRXmlLoader.load("/home/danverk/NetBeansProjects/ict_inventory/src/ict/inventory/reportsforinventory/issued.jrxml");
             
             ConnectToDB classForConnecting = new ConnectToDB();
             String queryForEmployeeAndProduct ="SELECT products.serial_no, products.prod_name,products.model, products.description, products.category, employee.name,department.name, issued.date_issued FROM (((issued INNER JOIN products ON issued.product_serial_no = products.serial_no) INNER JOIN employee ON issued.employee_id = employee.id) INNER JOIN department ON employee.department_id = department.id)";
             
             Statement st = classForConnecting.conn.createStatement();
             ResultSet rs = st.executeQuery(queryForEmployeeAndProduct);
             JRDesignQuery updateQuery = new JRDesignQuery();
             updateQuery.setText(queryForEmployeeAndProduct);
             jdesign.setQuery(updateQuery);
             
             JasperReport jreport = JasperCompileManager.compileReport(jdesign);
             
             JasperPrint jprint = JasperFillManager.fillReport(jreport, null, classForConnecting.conn);
             JasperViewer.viewReport(jprint);
             
             classForConnecting.conn.close();
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (JRException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
   
        

    }//GEN-LAST:event_reportForEmployeeActionPerformed

    private void updateEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateEmployeeBtnActionPerformed
//      
//            String productSerialNoUpdate = productSerialNoTxtUpdate.getText();
//            String employeeNameUpdate = employeeNameTxtUpdate.getText().toUpperCase().trim();
//            String departmentNameUpdate = departmentNameTxtUpdate2.getSelectedItem().toString();
//            
//            boolean isEmployeeValid = true;
//            
//            if(employeeNameUpdate.isEmpty()){
//                JOptionPane.showMessageDialog(null,"Employee is required");
//                isEmployeeValid= false;
//            }
//
//            if(isEmployeeValid = true){   
//                try {     
//                 ConnectToDB classForConnecting = new ConnectToDB();
//                 ConnectToDB classForConnecting2 = new ConnectToDB();
//
//                String idOfDepartment2 = "";
//                    Connection con2 = DriverManager.getConnection("jdbc:mysql://localhost:3306/ict_inventory","root","");
//                String querySelectDepartment = "SELECT id FROM department WHERE name = '"+departmentNameUpdate+"'";
//                            //   String queryUpdateEmployee = "UPDATE issued SET employee_name = '"+employeeNameUpdate+"' where product_id='35'";
// 
//                Statement selectDepart =   classForConnecting.conn.createStatement();
//                ResultSet rsf2 = selectDepart.executeQuery(querySelectDepartment);
//                while(rsf2.next()){
//                    idOfDepartment2 = rsf2.getString("id");
//
//                    String queryUpdateEmployee = "UPDATE issued SET employee_name = '"+employeeNameUpdate+"', department_id = '"+idOfDepartment2+"' WHERE product_serial_no = '"+productIdUpdate1+"'";
//                    String prod_id = productIdTxtUpdate.getText();
//                    Statement statemw = classForConnecting2.conn.createStatement();
//                    statemw.executeUpdate(queryUpdateEmployee);
//                     JOptionPane.showMessageDialog(null,"Record updated");
//                     refreshBtn.doClick();
//                }
//                //If department is not found the product is deleted 
//                if(idOfDepartment2.isEmpty()){
//                  JOptionPane.showMessageDialog(null,"Error: Department not found");
//                }else{           
//                 
//                }
//             } catch (ClassNotFoundException | SQLException ex) {
//                 Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//             }}
    }//GEN-LAST:event_updateEmployeeBtnActionPerformed

    private void issueBtn1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_issueBtn1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_issueBtn1FocusGained

    private void issueBtn1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueBtn1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_issueBtn1MouseClicked

    private void issueBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueBtn1MouseExited
        issueBtn1.setForeground(new java.awt.Color(91, 91, 91));


    }//GEN-LAST:event_issueBtn1MouseExited

    private void issueBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueBtn1MouseEntered
        issueBtn1.setForeground(new java.awt.Color(1, 1, 1));

    }//GEN-LAST:event_issueBtn1MouseEntered

    private void issueBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueBtn1ActionPerformed
        cardPanel.removeAll();
        cardPanel.add(stockPanel);
        refreshBtn1.doClick();
        cardPanel.repaint();
        cardPanel.revalidate();    
    }//GEN-LAST:event_issueBtn1ActionPerformed

    private void stockTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stockTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_stockTableMouseClicked

    private void refreshBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtn1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshBtn1MouseExited

    private void refreshBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshBtn1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshBtn1MouseEntered

    private void refreshBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtn1ActionPerformed
         try {
             show_stock();
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_refreshBtn1ActionPerformed

    private void searchBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseExited
        searchBtn.setBackground(java.awt.Color.blue);

    }//GEN-LAST:event_searchBtnMouseExited

    private void searchBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchBtnMouseEntered
        searchBtn.setBackground(java.awt.Color.gray);

    }//GEN-LAST:event_searchBtnMouseEntered

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        this.searchingTxt = searchTxt.getText();
        String selectedInSearchBox = searchByCombo.getSelectedItem().toString();
        
        if(selectedInSearchBox.equals("Product Serial No")){
        this.shortcutIdForQuery = 1;
        }
        if(selectedInSearchBox.equals("Model")){
        this.shortcutIdForQuery = 2;
        }        
        if(selectedInSearchBox.equals("Product Name")){
        this.shortcutIdForQuery = 3;
        }
        if(selectedInSearchBox.equals("Employee Name")){
        this.shortcutIdForQuery = 4 ;
        }
        if(selectedInSearchBox.equals("Description")){
        this.shortcutIdForQuery = 5 ;
        }
        search_employeesAndProducts();
    }//GEN-LAST:event_searchBtnActionPerformed

    private void departmentsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentsTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_departmentsTableMouseClicked

    private void updateDepartmentsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDepartmentsBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDepartmentsBtnMouseExited

    private void updateDepartmentsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDepartmentsBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDepartmentsBtnMouseEntered

    private void updateDepartmentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDepartmentsBtnActionPerformed
        // TODO add your handling code here:
        int[] i =  departmentsTable.getSelectedRows();
        TableModel selectRow = departmentsTable.getModel();
       
        String departmentName = (String) selectRow.getValueAt(i [0], 0);  
        UpdateDepartmentsNameFrm openFrm = new UpdateDepartmentsNameFrm(departmentName);
        openFrm.setVisible(true);
       
            
    }//GEN-LAST:event_updateDepartmentsBtnActionPerformed

    private void issueStockBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueStockBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_issueStockBtnMouseExited

    private void issueStockBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueStockBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_issueStockBtnMouseEntered

    private void issueStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueStockBtnActionPerformed
         try {
             int[] i =  stockTable.getSelectedRows();
             TableModel selectRow = stockTable.getModel();
             serial_no = (String) selectRow.getValueAt(i [0], 0);
             
             IssueProdFrm openFrm = new IssueProdFrm(serial_no, idForUser); 
             openFrm.setVisible(true);
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
        
    }//GEN-LAST:event_issueStockBtnActionPerformed

    private void DepartmentPanelMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepartmentPanelMenuBtnActionPerformed
 
        cardPanel.removeAll();
        cardPanel.add(DepartmentPanel);
        cardPanel.repaint();
        cardPanel.revalidate();  
    }//GEN-LAST:event_DepartmentPanelMenuBtnActionPerformed

    private void refreshDepartmentsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshDepartmentsBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshDepartmentsBtnMouseExited

    private void refreshDepartmentsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshDepartmentsBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshDepartmentsBtnMouseEntered

    private void refreshDepartmentsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshDepartmentsBtnActionPerformed
        show_departments();
    }//GEN-LAST:event_refreshDepartmentsBtnActionPerformed

    private void addDepartmentBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDepartmentBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_addDepartmentBtnMouseExited

    private void addDepartmentBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDepartmentBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addDepartmentBtnMouseEntered

    private void addDepartmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDepartmentBtnActionPerformed
        AddDepartmentsNameFrm OpenFrm = new AddDepartmentsNameFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addDepartmentBtnActionPerformed

    private void deleteDepartmentBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDepartmentBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDepartmentBtnMouseExited

    private void deleteDepartmentBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDepartmentBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteDepartmentBtnMouseEntered

    private void deleteDepartmentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteDepartmentBtnActionPerformed
         try {
             // TODO add your handling code here:
             int[] i =  departmentsTable.getSelectedRows();
             TableModel selectRow = departmentsTable.getModel();
             String departmentName = (String) selectRow.getValueAt(i [0], 0);
             
             ConnectToDB classForConnecting = new ConnectToDB();
             String queryDeleteUser = "DELETE from department "
                     + "WHERE name= ? ";
             PreparedStatement deletedep = classForConnecting.conn.prepareStatement(queryDeleteUser);
             deletedep.setString(1, departmentName);
//        updatedep.setString(2, departmentNameForDB);    //'"+departmentUpdate+"'"  '"+departmentNameForDB+"'";
            deletedep.executeUpdate();
            JOptionPane.showMessageDialog(null,"Record deleted");
            refreshDepartmentsBtn.doClick();
            classForConnecting.conn.close();       
         } catch (ClassNotFoundException | SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
        
        
    }//GEN-LAST:event_deleteDepartmentBtnActionPerformed

    private void updateBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBtnMouseExited
        updateBtn.setBackground(java.awt.Color.blue);

    }//GEN-LAST:event_updateBtnMouseExited

    private void updateBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateBtnMouseEntered
        updateBtn.setBackground(java.awt.Color.gray);
    }//GEN-LAST:event_updateBtnMouseEntered

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
//        // TODO add your handling code here:
//        show_categoryForUpdate();
//        updateProductFrm OpenFrm = new  updateProductFrm();
//        OpenFrm.setVisible(true);
//        
//        int[] i =  employeesAndProductsTable.getSelectedRows();
//        TableModel selectRow = employeesAndProductsTable.getModel();
//        this.currentSelectedProductSerial = (String) selectRow.getValueAt(i [0], 0);
//        productSNTxtUpdate.setText((String) selectRow.getValueAt(i [0], 0));           
//        productNameTxtUpdate.setText((String) selectRow.getValueAt(i [0], 1));           
//        descriptionTxtUpdate.setText((String) selectRow.getValueAt(i [0], 2));
//        descriptionTxtUpdate.setText((String) selectRow.getValueAt(i [0], 3));
//        categoryUpdateCombo.setSelectedItem((String) selectRow.getValueAt(i [0], 4));           
//        LocationTxtUpdateCombo.setSelectedItem((String) selectRow.getValueAt(i [0], 4));           
//                      
//        cardPanel.removeAll();
//        cardPanel.add(updateProductPanel);
//        cardPanel.repaint();
//        cardPanel.revalidate();  
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteEmployeeAndProductBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeAndProductBtnMouseExited
        deleteEmployeeAndProductBtn.setBackground(java.awt.Color.red);

    }//GEN-LAST:event_deleteEmployeeAndProductBtnMouseExited

    private void deleteEmployeeAndProductBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeAndProductBtnMouseEntered
        deleteEmployeeAndProductBtn.setBackground(java.awt.Color.gray);
        
    }//GEN-LAST:event_deleteEmployeeAndProductBtnMouseEntered

    private void deleteEmployeeAndProductBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeAndProductBtnActionPerformed
         try {
             ConnectToDB classForConnecting = new ConnectToDB();
             
             int[] i =  employeesAndProductsTable.getSelectedRows();
             TableModel selectRow = employeesAndProductsTable.getModel();
             
             String productSerial =  (String) selectRow.getValueAt(i [0], 0);
             String queryDeleteEmployeeAndProduct = "DELETE FROM issued WHERE product_serial_no = '"+ productSerial +"'";
             String queryUpdateProductAsUnavailable = "UPDATE products SET is_available='1' WHERE serial_no='"+productSerial+"'";
             Statement statemDelete = classForConnecting.conn.createStatement();             
             Statement statemUpdate = classForConnecting.conn.createStatement();

             statemDelete.executeUpdate(queryDeleteEmployeeAndProduct);
             statemUpdate.executeUpdate(queryUpdateProductAsUnavailable);
             JOptionPane.showMessageDialog(null,"Record deleted, Equipment repossesed");
             refreshBtn.doClick();
             classForConnecting.conn.close();
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_deleteEmployeeAndProductBtnActionPerformed

    private void employeesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_employeesTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_employeesTableMouseClicked

    private void updateDepartmentsBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDepartmentsBtn1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDepartmentsBtn1MouseExited

    private void updateDepartmentsBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateDepartmentsBtn1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_updateDepartmentsBtn1MouseEntered

    private void updateDepartmentsBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateDepartmentsBtn1ActionPerformed
        int[] i =  employeesTable.getSelectedRows();
        TableModel selectRow = employeesTable.getModel();
       
        String employeeName = (String) selectRow.getValueAt(i [0], 0);  
        //String employeeDepartment = (String) selectRow.getValueAt(i [0], 1);  
        UpdateEmployeeNameFrm openDepart = new UpdateEmployeeNameFrm(employeeName);
        openDepart.setVisible(true);
     
    }//GEN-LAST:event_updateDepartmentsBtn1ActionPerformed

    private void refreshEmployeesBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshEmployeesBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshEmployeesBtnMouseExited

    private void refreshEmployeesBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshEmployeesBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshEmployeesBtnMouseEntered

    private void refreshEmployeesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshEmployeesBtnActionPerformed
        show_employees();
    }//GEN-LAST:event_refreshEmployeesBtnActionPerformed

    private void addDepartmentBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDepartmentBtn1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_addDepartmentBtn1MouseExited

    private void addDepartmentBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addDepartmentBtn1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addDepartmentBtn1MouseEntered

    private void addDepartmentBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDepartmentBtn1ActionPerformed
        AddEmployeeNameFrm OpenFrm = new AddEmployeeNameFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addDepartmentBtn1ActionPerformed

    private void deleteEmployeeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteEmployeeBtnMouseExited

    private void deleteEmployeeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteEmployeeBtnMouseEntered

    private void deleteEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeBtnActionPerformed
         try {
             int[] i =  employeesTable.getSelectedRows();
             TableModel selectRow = employeesTable.getModel();
             String employeeName = (String) selectRow.getValueAt(i [0], 0);
             
             ConnectToDB classForConnecting = new ConnectToDB();
             String queryDeleteUser = "DELETE from employee "
                     + "WHERE name= ? ";
             PreparedStatement deleteEmp = classForConnecting.conn.prepareStatement(queryDeleteUser);
             deleteEmp.setString(1, employeeName);
//        updatedep.setString(2, departmentNameForDB);    //'"+departmentUpdate+"'"  '"+departmentNameForDB+"'";
            deleteEmp.executeUpdate();
            JOptionPane.showMessageDialog(null,"Employee deleted");
            refreshDepartmentsBtn.doClick();
            classForConnecting.conn.close();       
         } catch (ClassNotFoundException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         } catch (SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_deleteEmployeeBtnActionPerformed

    private void employeeMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeMenuBtnActionPerformed
        cardPanel.removeAll();
        cardPanel.add(employeePanel);
        cardPanel.repaint();
        cardPanel.revalidate();
    }//GEN-LAST:event_employeeMenuBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
      this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void locationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_locationTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_locationTableMouseClicked

    private void updateLocationBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateLocationBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_updateLocationBtnMouseExited

    private void updateLocationBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateLocationBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_updateLocationBtnMouseEntered

    private void updateLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateLocationBtnActionPerformed
        int[] i =  locationTable.getSelectedRows();
        TableModel selectRow = locationTable.getModel();
       
        String locationName = (String) selectRow.getValueAt(i [0], 0);  
        UpdateLocationFrm openDepart = new UpdateLocationFrm(locationName);
        openDepart.setVisible(true); 
    }//GEN-LAST:event_updateLocationBtnActionPerformed

    private void refreshLocationBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshLocationBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshLocationBtnMouseExited

    private void refreshLocationBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshLocationBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshLocationBtnMouseEntered

    private void refreshLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshLocationBtnActionPerformed
        show_location();
    }//GEN-LAST:event_refreshLocationBtnActionPerformed

    private void addLocationBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLocationBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_addLocationBtnMouseExited

    private void addLocationBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addLocationBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addLocationBtnMouseEntered

    private void addLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLocationBtnActionPerformed
        AddLocationFrm OpenFrm = new AddLocationFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addLocationBtnActionPerformed

    private void deleteLocationBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteLocationBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteLocationBtnMouseExited

    private void deleteLocationBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteLocationBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteLocationBtnMouseEntered

    private void deleteLocationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteLocationBtnActionPerformed
        try {
             // TODO add your handling code here:
             int[] i =  locationTable.getSelectedRows();
             TableModel selectRow = locationTable.getModel();
             String locationName = (String) selectRow.getValueAt(i [0], 0);

             ConnectToDB classForConnecting = new ConnectToDB();
             String queryDeleteLocation = "DELETE from location "
                     + "WHERE name= ? ";
             PreparedStatement deleteLoc = classForConnecting.conn.prepareStatement(queryDeleteLocation);
             deleteLoc.setString(1, locationName);
            deleteLoc.executeUpdate();
            JOptionPane.showMessageDialog(null,"Location deleted");
            refreshLocationBtn.doClick();
            classForConnecting.conn.close();       
         } catch (ClassNotFoundException | SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_deleteLocationBtnActionPerformed

    private void categoryTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_categoryTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_categoryTableMouseClicked

    private void updateCategoryBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCategoryBtnMouseExited

    private void updateCategoryBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCategoryBtnMouseEntered

    private void updateCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCategoryBtnActionPerformed
        int[] i =  categoryTable.getSelectedRows();
        TableModel selectRow = categoryTable.getModel();
       
        String categoryName = (String) selectRow.getValueAt(i [0], 0);  
        UpdateCategoryFrm openDepart = new UpdateCategoryFrm(categoryName);
        openDepart.setVisible(true); 
    }//GEN-LAST:event_updateCategoryBtnActionPerformed

    private void refreshCategoryBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshCategoryBtnMouseExited

    private void refreshCategoryBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCategoryBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshCategoryBtnMouseEntered

    private void refreshCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshCategoryBtnActionPerformed
        show_category();
    }//GEN-LAST:event_refreshCategoryBtnActionPerformed

    private void addCategoryBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCategoryBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_addCategoryBtnMouseExited

    private void addCategoryBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCategoryBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addCategoryBtnMouseEntered

    private void addCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryBtnActionPerformed
        AddCategoryFrm OpenFrm = new AddCategoryFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addCategoryBtnActionPerformed

    private void deleteCategoryBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCategoryBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCategoryBtnMouseExited

    private void deleteCategoryBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCategoryBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCategoryBtnMouseEntered

    private void deleteCategoryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCategoryBtnActionPerformed
        try {
             // TODO add your handling code here:
             int[] i =  categoryTable.getSelectedRows();
             TableModel selectRow = categoryTable.getModel();
             String categoyName = (String) selectRow.getValueAt(i [0], 0);

             ConnectToDB classForConnecting = new ConnectToDB();
             String queryDeleteCategory = "DELETE from category "
                     + "WHERE name= ? ";
             PreparedStatement deleteCat = classForConnecting.conn.prepareStatement(queryDeleteCategory);
             deleteCat.setString(1, categoyName);
//        updatedep.setString(2, departmentNameForDB);    //'"+departmentUpdate+"'"  '"+departmentNameForDB+"'";
            deleteCat.executeUpdate();
            JOptionPane.showMessageDialog(null,"Category deleted");
            refreshCategoryBtn.doClick();
            classForConnecting.conn.close();       
         } catch (ClassNotFoundException | SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);            
             JOptionPane.showMessageDialog(null,"Error in Category sql ");

         }
    }//GEN-LAST:event_deleteCategoryBtnActionPerformed
    public void retrieveCategory(){
     
        try {
            ConnectToDB classForConnecting = new ConnectToDB();
            String query = "SELECT name FROM category";
            Statement st = classForConnecting.conn.createStatement();
            ResultSet rs = st.executeQuery(query);
            searchByCombo.removeAllItems();
            
            while(rs.next()){
                String categoryName = rs.getString("name");
                searchByCombo.addItem(categoryName);
            }
            classForConnecting.conn.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(AddProductFrm.class.getName()).log(Level.SEVERE, null, ex);
                         JOptionPane.showMessageDialog(null,"Error in Category sql ");

        } catch (SQLException ex) {
            Logger.getLogger(AddProductFrm.class.getName()).log(Level.SEVERE, null, ex);
                         JOptionPane.showMessageDialog(null,"Error in Category sql ");

        }
    }
    private void categoryMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryMenuBtnActionPerformed
        cardPanel.removeAll();
        cardPanel.add(categoryPanel);
        cardPanel.repaint();
        cardPanel.revalidate();
    }//GEN-LAST:event_categoryMenuBtnActionPerformed

    private void locationMenuBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationMenuBtnActionPerformed
        cardPanel.removeAll();
        cardPanel.add(locationPanel);
        cardPanel.repaint();
        cardPanel.revalidate();
    }//GEN-LAST:event_locationMenuBtnActionPerformed

    private void campusTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_campusTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_campusTableMouseClicked

    private void updateCategoryBtn1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryBtn1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCategoryBtn1MouseExited

    private void updateCategoryBtn1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_updateCategoryBtn1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCategoryBtn1MouseEntered

    private void updateCategoryBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCategoryBtn1ActionPerformed
        int[] i =  campusTable.getSelectedRows();
        TableModel selectRow = campusTable.getModel();
       
        String campusName = (String) selectRow.getValueAt(i [0], 0);  
        UpdateCampusFrm openDepart = new UpdateCampusFrm(campusName);
        openDepart.setVisible(true); 
    }//GEN-LAST:event_updateCategoryBtn1ActionPerformed

    private void refreshCampusBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCampusBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshCampusBtnMouseExited

    private void refreshCampusBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshCampusBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshCampusBtnMouseEntered

    private void refreshCampusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshCampusBtnActionPerformed
        show_campus();
    }//GEN-LAST:event_refreshCampusBtnActionPerformed

    private void addCampusBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCampusBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_addCampusBtnMouseExited

    private void addCampusBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addCampusBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_addCampusBtnMouseEntered

    private void addCampusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCampusBtnActionPerformed
        AddCampusFrm OpenFrm = new AddCampusFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addCampusBtnActionPerformed

    private void deleteCampusBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCampusBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCampusBtnMouseExited

    private void deleteCampusBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteCampusBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteCampusBtnMouseEntered

    private void deleteCampusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCampusBtnActionPerformed
        try {
             int[] i =  campusTable.getSelectedRows();
             TableModel selectRow = campusTable.getModel();
             String categoyName = (String) selectRow.getValueAt(i [0], 0);

             ConnectToDB classForConnecting = new ConnectToDB();
             String queryDeleteCampus = "DELETE from campus "
                     + "WHERE name= ? ";
             PreparedStatement deleteCamp = classForConnecting.conn.prepareStatement(queryDeleteCampus);
             deleteCamp.setString(1, categoyName);
            deleteCamp.executeUpdate();
            JOptionPane.showMessageDialog(null,"Campus deleted");
            refreshCategoryBtn.doClick();
            classForConnecting.conn.close();       
         } catch (ClassNotFoundException | SQLException ex) {
             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
         }
    }//GEN-LAST:event_deleteCampusBtnActionPerformed

    private void addStockBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStockBtnActionPerformed
        AddProductFrm OpenFrm = new AddProductFrm();
        OpenFrm.setVisible(true);
    }//GEN-LAST:event_addStockBtnActionPerformed

    private void searchByComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByComboActionPerformed
     
//        try {
//             ConnectToDB classForConnecting = new ConnectToDB();
//             String categoryName = categoryCombo.getSelectedItem().toString();
//             String querySelectIdForCategory = "SELECT id FROM category where name='"+categoryName+"'";
//             Statement st = classForConnecting.conn.createStatement();
//             ResultSet rs = st.executeQuery(querySelectIdForCategory);            
//             while(rs.next()){
//                 selectedCategoryId = rs.getString("id");
//             }       
//             show_employeesAndProducts();
//             
//         } catch (ClassNotFoundException | SQLException ex) {
//             Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
//         }
            
    }//GEN-LAST:event_searchByComboActionPerformed

    private void searchEmployeeBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchEmployeeBtnMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_searchEmployeeBtnMouseExited

    private void searchEmployeeBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchEmployeeBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_searchEmployeeBtnMouseEntered

    private void searchEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchEmployeeBtnActionPerformed
        this.employeeSearch = searchEmployeeTxt.getText();
        
        show_SearchEmployees();
        
        
        
    }//GEN-LAST:event_searchEmployeeBtnActionPerformed

    private void updateProductMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateProductMenuItemActionPerformed

        int[] i =  stockTable.getSelectedRows();
        TableModel selectRow = stockTable.getModel();
        this.currentSelectedProductSerial = (String) selectRow.getValueAt(i [0], 0);
        String productSN = (String) selectRow.getValueAt(i [0], 0); 
        String productModel = (String) selectRow.getValueAt(i [0], 1);   
        String productName = (String) selectRow.getValueAt(i [0], 1);           
        String descriptionTxt = (String) selectRow.getValueAt(i [0], 2);
         
        updateProductFrm OpenFrm = new  updateProductFrm(currentSelectedProductSerial,
                productSN, productModel, productName, descriptionTxt);
        OpenFrm.setVisible(true);
                
    }//GEN-LAST:event_updateProductMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
         //</editor-fold>
         
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
                productsBtn.addActionListener(new ProductsAction());
            }
        });
    }
    //added clients retrieval
    public ArrayList<Departments> DepartmentsList(){
      
        ArrayList<Departments> DepartmentsList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT name FROM department";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Departments departments;
        while(rs.next()){
        departments = new Departments(
                rs.getString("name")
                ); 
        DepartmentsList.add(departments);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return DepartmentsList;          
    }
    
    public ArrayList<Campus> CampusList(){
      
        ArrayList<Campus> CampusList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT name FROM campus";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Campus campus;
        while(rs.next()){
        campus = new Campus(
                rs.getString("name")
                ); 
        CampusList.add(campus);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return CampusList;          
    }    
 
    public ArrayList<Stock> IssueList(){
      
        ArrayList<Stock> IssueList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT * FROM product where serial_no = '"+serial_no+"'";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Stock stock;
        while(rs.next()){
        stock = new Stock(
                    rs.getString("serial_no")
                    ,rs.getString("model")                    
                    ,rs.getString("prod_name")
                    ,rs.getString("description") 
                    ,rs.getString("location") 
                    ,rs.getString("category")                     
                    ,rs.getString("date_added_in_stock")
                  
                ); 
        IssueList.add(stock);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return IssueList;          
    }    
    //show employees in EmployeeTable table
    public ArrayList<Employees> EmployeeList(){
      
        ArrayList<Employees> EmployeeList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT employee.name, department.name FROM employee INNER JOIN department ON employee.department_id = department.id";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Employees employees;
        while(rs.next()){
        employees = new Employees(
                rs.getString("employee.name"),
                rs.getString("department.name")
                ); 
        EmployeeList.add(employees);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
                        JOptionPane.showMessageDialog(null,"Error in SQL Employee Table");

        }
              return EmployeeList;          
    } 

    public ArrayList<Employees> SearchEmployeeList(){
      
        ArrayList<Employees> SearchEmployeeList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT employee.name, department.name FROM employee "
                + "INNER JOIN department ON employee.department_id = department.id "
                + "WHERE employee.name LIKE '%"+employeeSearch+"%'";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Employees employees;
        while(rs.next()){
        employees = new Employees(
                rs.getString("employee.name"),
                rs.getString("department.name")
                ); 
        SearchEmployeeList.add(employees);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
                        JOptionPane.showMessageDialog(null,"Error in SQL Employee Table");

        }
              return SearchEmployeeList;          
    } 
    
    public ArrayList<Location> LocationList(){
      
        ArrayList<Location> LocationList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT name FROM location";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Location location;
        while(rs.next()){
        location = new Location(
                rs.getString("name")
                ); 
        LocationList.add(location);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return LocationList;          
    } 
    public ArrayList<Category> CategoryList(){
      
        ArrayList<Category> CategoryList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT name FROM category";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Category category;
        while(rs.next()){
        category = new Category(
                rs.getString("name")
                ); 
        CategoryList.add(category);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return CategoryList;          
    }   
        public ArrayList<Category> CategoryUpdateList(){
      
        ArrayList<Category> CategoryUpdateList = new ArrayList<>();
        try {
        ConnectToDB classForConnecting = new ConnectToDB(); 
        String query = "SELECT name FROM category";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        Category category;
        while(rs.next()){
        category = new Category(
                rs.getString("name")
                ); 
        CategoryUpdateList.add(category);
            }
        classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
              return CategoryUpdateList;          
    }    
// retreiving products products
 public ArrayList<Stock> stockList(){
        
            ArrayList<Stock> stockList = new ArrayList<>();
            try {
                ConnectToDB classForConnecting = new ConnectToDB(); 
                String queryForProduct ="SELECT * FROM products where is_available = '1'";

            Statement st = classForConnecting.conn.createStatement();
            ResultSet rs = st.executeQuery(queryForProduct);
            Stock stock;
            while(rs.next()){
            stock= new Stock(                    
                     rs.getString("serial_no")
                    ,rs.getString("model")                    
                    ,rs.getString("prod_name")
                    ,rs.getString("description") 
                    ,rs.getString("location") 
                    ,rs.getString("category")                     
                    ,rs.getString("date_added_in_stock")
                  
            ); //productsTable
            stockList.add(stock);
            }
            classForConnecting.conn.close();
        }  catch (ClassNotFoundException | SQLException e) {
        }
            
              return stockList;          
    }  
        
public ArrayList<EmployeeAndProducts> employeeAndProductList(){
        String CategorySelected = searchByCombo.getSelectedItem().toString();

        String queryForEmployeeAndProduct = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id)";
                    
            ArrayList<EmployeeAndProducts> employeeAndProductList = new ArrayList<>();
            try {
                ConnectToDB classForConnecting = new ConnectToDB(); 
                Statement st = classForConnecting.conn.createStatement();          
                ResultSet rs = st.executeQuery(queryForEmployeeAndProduct);       
                EmployeeAndProducts employeeAndProducts;
                while(rs.next()){
                employeeAndProducts= new EmployeeAndProducts(                    
                        rs.getString("products.serial_no")
                        ,rs.getString("products.model")
                        ,rs.getString("products.prod_name")
                        ,rs.getString("products.description") 
                        ,rs.getString("category.name") 
                        ,rs.getString("location.name")                     
                        ,rs.getString("employee.name")                    
                        ,rs.getString("issued.date_issued") 
                        ,rs.getString("users.username") 
            ); 
            employeeAndProductList.add(employeeAndProducts);
            }
            classForConnecting.conn.close();
            
        }  catch (ClassNotFoundException | SQLException e) {
        }
            
              return employeeAndProductList;          
    }
public ArrayList<EmployeeAndProducts> searchEmployeeAndProductList(){


        String queryForSearchingProductSerial = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id) "
        + "WHERE products.serial_no LIKE '%"+searchingTxt+"%'";
        
        String queryForSearchingModel = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id) "
        + "WHERE products.model LIKE '%"+searchingTxt+"%'";        
        
        String queryForSearchingProductName = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id) "
        + "WHERE products.prod_name LIKE '%"+searchingTxt+"%'";
        
        String queryForSearchingEmployeeName = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id) "
        + "WHERE employee.name LIKE '%"+searchingTxt+"%'"; 
        String queryForSearchingDescription = "SELECT products.serial_no, "
        + "products.model, products.prod_name, products.description, "
        + "products.location, products.category, employee.name, issued.date_issued,"
        + "users.username, category.name, location.name "
        + "FROM (((((issued "
        + "INNER JOIN products ON issued.product_serial_no = products.serial_no) "
        + "INNER JOIN employee ON issued.employee_id = employee.id) "
        + "INNER JOIN users ON issued.added_by = users.user_id) "
        + "INNER JOIN location ON issued.location_id = location.id) "
        + "INNER JOIN category ON issued.category_id = category.id) "
        + "WHERE products.description LIKE '%"+searchingTxt+"%'";          
        System.out.println(searchingTxt);
                
            ArrayList<EmployeeAndProducts> searchEmployeeAndProductList = new ArrayList<>();
            try {
                ConnectToDB classForConnecting = new ConnectToDB(); 
                Statement st = classForConnecting.conn.createStatement();     
                ResultSet rs = null;       

                if( shortcutIdForQuery==1){
                rs = st.executeQuery(queryForSearchingProductSerial);                
                }
                if( shortcutIdForQuery==2){
                rs = st.executeQuery(queryForSearchingModel);                
                }
                if( shortcutIdForQuery==3){
                rs = st.executeQuery(queryForSearchingProductName);                
                }
                if( shortcutIdForQuery==4){
                rs = st.executeQuery(queryForSearchingEmployeeName);                
                }
                if( shortcutIdForQuery==5){
                rs = st.executeQuery(queryForSearchingDescription);                
                }                
                EmployeeAndProducts employeeAndProducts;
                while(rs.next()){
                employeeAndProducts= new EmployeeAndProducts(                    
                        rs.getString("products.serial_no")
                        ,rs.getString("products.model")
                        ,rs.getString("products.prod_name")
                        ,rs.getString("products.description") 
                        ,rs.getString("category.name") 
                        ,rs.getString("location.name")                     
                        ,rs.getString("employee.name")                    
                        ,rs.getString("issued.date_issued") 
                        ,rs.getString("users.username") 
            ); 
            searchEmployeeAndProductList.add(employeeAndProducts);
            }
            classForConnecting.conn.close();
            
        }  catch (ClassNotFoundException | SQLException e) {
        }
            
              return searchEmployeeAndProductList;          
    }
    public void show_employeesAndProducts(){
        
    ArrayList<EmployeeAndProducts> list = employeeAndProductList();  
    DefaultTableModel  model= (DefaultTableModel)employeesAndProductsTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[10];
    for(int i=0; i<list.size();i++){

        row[0] =list.get(i).getProductSerialNo();
        row[1] =list.get(i).getModel();
        row[2] =list.get(i).getProductName();
        row[3] =list.get(i).getProductDescription();
        row[4] =list.get(i).getCategory();
        row[5] =list.get(i).getProductsLocation();
        row[6] =list.get(i).getEmployeeName();
        row[7] =list.get(i).getDateIssued();
        row[8] =list.get(i).getIssuedBy();
       
        model.addRow(row);
    }
    }
    public void search_employeesAndProducts(){
        
    ArrayList<EmployeeAndProducts> list = searchEmployeeAndProductList();  
    DefaultTableModel  model= (DefaultTableModel)employeesAndProductsTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[10];
    for(int i=0; i<list.size();i++){

        row[0] =list.get(i).getProductSerialNo();
        row[1] =list.get(i).getModel();
        row[2] =list.get(i).getProductName();
        row[3] =list.get(i).getProductDescription();
        row[4] =list.get(i).getCategory();
        row[5] =list.get(i).getProductsLocation();
        row[6] =list.get(i).getEmployeeName();
        row[7] =list.get(i).getDateIssued();
        row[8] =list.get(i).getIssuedBy();
       
        model.addRow(row);
    }
    }    
    
    public void show_stock() throws ClassNotFoundException, SQLException{
    ArrayList<Stock> list = stockList();  
    DefaultTableModel  model= (DefaultTableModel)stockTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[8];
    ConnectToDB classForConnecting = new ConnectToDB();     
    ConnectToDB classForConnecting2 = new ConnectToDB();     

    for(int i=0; i<list.size();i++){

        row[0] =list.get(i).getProductSerialNo();
        row[1] =list.get(i).getProductModel();
        row[2] =list.get(i).getProductName();
        row[3] =list.get(i).getDescription();
        row[4] =list.get(i).getCategory();        
        String Category = list.get(i).getCategory();
        String query = "SELECT name FROM category where id = '"+Category+"'";
        Statement st = classForConnecting.conn.createStatement();
        ResultSet rs = st.executeQuery(query);
        while(rs.next()){
        row[4] = rs.getString("name");
        }
        String Location = list.get(i).getLocation();
        String query2 = "SELECT name FROM location where id = '"+Location+"'";
        Statement st2 = classForConnecting2.conn.createStatement();
        ResultSet rs2 = st2.executeQuery(query2);
        while(rs2.next()){
        row[5] = rs2.getString("name");
        }        
        row[6] =list.get(i).getDateAddedInStock();
        model.addRow(row);
    }
    classForConnecting.conn.close();    
    classForConnecting2.conn.close();

    }
 
    public void show_employees(){
    ArrayList<Employees> list = EmployeeList();  
    DefaultTableModel  model= (DefaultTableModel)employeesTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[3];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getEmployeeName();
        row[1] =list.get(i).getDepartmentName();
        model.addRow(row);
    }
    }    
    public void show_SearchEmployees(){
    ArrayList<Employees> list = SearchEmployeeList();  
    DefaultTableModel  model= (DefaultTableModel)employeesTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[3];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getEmployeeName();
        row[1] =list.get(i).getDepartmentName();
        model.addRow(row);
    }
    }     
    //to add data in departments table and show departments
    public void show_departments(){
    ArrayList<Departments> list = DepartmentsList();  
    DefaultTableModel  model= (DefaultTableModel)departmentsTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[1];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getDepartmentName();
        model.addRow(row);
        }
    }   

    public void show_campus(){
    ArrayList<Campus> list = CampusList();  
    DefaultTableModel  model= (DefaultTableModel)campusTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[1];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getCampusName();
        model.addRow(row);
        }
    }
  
    public void show_location(){
    ArrayList<Location> list = LocationList();  
    DefaultTableModel  model= (DefaultTableModel)locationTable.getModel();
    model.setRowCount(0);
    Object[] row = new Object[1];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getLocationName();
        model.addRow(row);
        }
    } 
    
    public void show_category(){
    ArrayList<Category> list = CategoryList();  
    DefaultTableModel  model= (DefaultTableModel)categoryTable.getModel();

    model.setRowCount(0);

    Object[] row = new Object[1];
    for(int i=0; i<list.size();i++){
        row[0] =list.get(i).getCategoryName();
        model.addRow(row);     

        }
    } 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JPanel AppPanel;
    private static javax.swing.JPanel DepartmentPanel;
    private javax.swing.JMenuItem DepartmentPanelMenuBtn;
    private javax.swing.JPanel IssuePanel2;
    private static javax.swing.JButton addCampusBtn;
    private static javax.swing.JButton addCategoryBtn;
    private static javax.swing.JButton addDepartmentBtn;
    private static javax.swing.JButton addDepartmentBtn1;
    private static javax.swing.JButton addLocationBtn;
    private static javax.swing.JPanel addProductPanel2;
    private javax.swing.JMenuItem addStockBtn;
    private javax.swing.JMenu adminRoleBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private static javax.swing.JPanel campusPanel;
    private javax.swing.JTable campusTable;
    private static javax.swing.JPanel cardPanel;
    private javax.swing.JMenuItem categoryMenuBtn;
    private static javax.swing.JPanel categoryPanel;
    private javax.swing.JTable categoryTable;
    private static javax.swing.JButton deleteCampusBtn;
    private static javax.swing.JButton deleteCategoryBtn;
    private static javax.swing.JButton deleteDepartmentBtn;
    private static javax.swing.JButton deleteEmployeeAndProductBtn;
    private static javax.swing.JButton deleteEmployeeBtn;
    private static javax.swing.JButton deleteLocationBtn;
    private static javax.swing.JComboBox<String> departmentNameTxtUpdate2;
    private javax.swing.JTable departmentsTable;
    private javax.swing.JMenuItem employeeMenuBtn;
    private static javax.swing.JTextField employeeNameTxtUpdate;
    private static javax.swing.JPanel employeePanel;
    private javax.swing.JTable employeesAndProductsTable;
    private javax.swing.JTable employeesTable;
    private static javax.swing.JLabel infoLbl;
    private javax.swing.JButton issueBtn1;
    private static javax.swing.JButton issueStockBtn;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JMenuItem locationMenuBtn;
    private static javax.swing.JPanel locationPanel;
    private javax.swing.JTable locationTable;
    private javax.swing.JLabel productSerialNoTxtUpdate;
    private static javax.swing.JPanel productsAndEmployeePanel;
    private static javax.swing.JButton productsBtn;
    private static javax.swing.JButton refreshBtn;
    private static javax.swing.JButton refreshBtn1;
    public static javax.swing.JButton refreshCampusBtn;
    public static javax.swing.JButton refreshCategoryBtn;
    public static javax.swing.JButton refreshDepartmentsBtn;
    public static javax.swing.JButton refreshEmployeesBtn;
    public static javax.swing.JButton refreshLocationBtn;
    private javax.swing.JMenuItem reportForEmployee;
    private static javax.swing.JButton searchBtn;
    private static javax.swing.JComboBox<String> searchByCombo;
    private static javax.swing.JButton searchEmployeeBtn;
    private static javax.swing.JTextField searchEmployeeTxt;
    private static javax.swing.JTextField searchTxt;
    private javax.swing.JMenuItem showUsersMenuBtn;
    private static javax.swing.JPanel stockPanel;
    private javax.swing.JTable stockTable;
    private javax.swing.JMenu superAdminBtn;
    private static javax.swing.JButton updateBtn;
    private static javax.swing.JButton updateCategoryBtn;
    private static javax.swing.JButton updateCategoryBtn1;
    private static javax.swing.JButton updateDepartmentsBtn;
    private static javax.swing.JButton updateDepartmentsBtn1;
    private static javax.swing.JButton updateEmployeeBtn;
    private javax.swing.JPanel updateEmployeePanel;
    private static javax.swing.JButton updateLocationBtn;
    private javax.swing.JMenuItem updateProductMenuItem;
    private static javax.swing.JLabel usernameLbl;
    // End of variables declaration//GEN-END:variables

    private static class ProductsAction implements ActionListener {

        public ProductsAction() {
        }
        @Override
        public void actionPerformed(ActionEvent e) {
        cardPanel.removeAll();
        cardPanel.add(productsAndEmployeePanel);
        cardPanel.repaint();
        cardPanel.revalidate();
        }
    }
}
  
        
    

